openapi: 3.0.0
info:
  title: WABToDo-back-end
  version: 1.0.0

paths:
  /api/users/registration/:
    post:
      summary: Registering a user as a client or as a team member
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  uniqueItems: true
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                password1:
                  type: string
                password2:
                  type: string
                isTeamMember:
                  type: boolean
                  default: false
                isAdmin:
                  type: boolean
                  default: false
              required:
                - firstName
                - lastName
                - email
                - password
                - password2

              example:
                {
                  username: TheFirstUser,
                  firstName: User,
                  lastName: NotUser,
                  email: theuseremail@gmail.com,
                  phoneNumber: "+1234567890",
                  password: Weneedmorebananasthan1!,
                  password2: Weneedmorebananasthan1!,
                }

      responses:
        '201':
          description: Redirect the user to the login page
          content:
            application/json:
              example:
                {
                  username: TheFirstUser,
                  firstName: User,
                  lastName: NotUser,
                  email: theuseremail@gmail.com,
                  phoneNumber: "+1234567890",
                  password: Weneedmorebananasthan1!,
                  password2: Weneedmorebananasthan1!,
                  "isTeamMember": false,
                  "isAdmin": false,
                  "isStaff": false
                }
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }

  /api/users/login/:
    post:
      summary: Create user access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password

      responses:
        '201':
          description: Return access token and redirect to dashboard
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: user_json_web_token

        '401':
          description: Stay on the same page
          content:
            application/json:
              example:
                detail: Invalid email or password.

  /api/users/dashboard/:
    get:
      summary: Getting the list of user's orders aka projects
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication

      responses:
        '200':
          description: List active of projects. If the user has no orders - return an empty list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of projects.
                  next:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the next page of results.
                  previous:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the previous page of results.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Unique identifier for the project.
                        name:
                          type: string
                          description: Name of the project.
                        owner:
                          type: string
                          description: Name of the project owner.
                        createdAt:
                          type: string
                          format: date
                          description: Date when the project was created.
                        accepted:
                          type: boolean
                          description: Indicates whether the project was accepted.
                        status:
                          type: string
                          default: active
                          description: Current status of the project.
              example:
                count: 1
                next: http://127.0.0.1:8000/api/users/dashboard/?page=2
                previous: http://127.0.0.1:8000/api/users/dashboard/?page=1
                results:
                  - id: 1
                    name: "FirstUserOrder"
                    owner: "OwnerName"
                    createdAt: "2025-01-09"
                    accepted: false
                    status: "pending"
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.


  /api/orders/create/:
    post:
      summary: Creating an order aka a project
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the project
                description:
                  type: string
                  description: Detailed description of the project
                deadline:
                  type: string
                  format: date
                  description: Project deadline in ISO 8601 format (YYYY-MM-DD)
              required:
                - name
                - description
                - deadline
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  owner:
                    type: integer
                    description: ID of the user who created the order (automatically assigned)
                  name:
                    type: string
                  description:
                    type: string
                  deadline:
                    type: string
                    format: date
                  createdAt:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    nullable: false
                    format: date
                  acceptedAt:
                    type: string
                    nullable: true
                    format: date
                  accepted:
                    type: boolean
                    default: false
                  team:
                    type: integer
                    nullable: true
                    description: team ID
                  tasks:
                    type: array
                  status:
                    type: string
                    default: "pending"
                example:
                  id: 1
                  owner: 1
                  name: New Project
                  description: Project description
                  deadline: 2025-11-30
                  createdAt: 2024-11-30
                  updatedAt: null
                  acceptedAt: null
                  accepted: false
                  team: null
                  tasks: [ ]
                  status: pending
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.

  /api/orders/edit/{id}:
    patch:
      summary: Edit order details
      description: Request for user to change order details himself
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                deadline:
                  type: string
                  format: date

      responses:
        '200':
          description: Status of the updated order
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  deadline:
                    type: string
                    format: date
                  updatedAt:
                    type: string
                    format: date
                    description: Set automatically when a request is sent
                  status:
                    type: string
                example:
                  id: 1
                  name: New Project Name
                  description: New description
                  deadline: 2026-11-30
                  updatedAt: 2024-11-30
                  string: pending
        '400':
          description: Stay on the same page
          content:
            application/json:
              example:
                message: "Entered data is not valid"
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.

  /api/orders/management/:
    get:
      summary: Get list of incoming orders
      description: Retrieve a paginated list of unaccepted orders based on filtering and sorting criteria.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
        - in: query
          name: status
          required: false
          schema:
            type: string
          description: Filter orders by status (e.g., pending, active).
        - in: query
          name: is_accepted
          required: false
          schema:
            type: boolean
          description: Filter orders by acceptance status (true or false).
        - in: query
          name: order_by_date
          required: false
          schema:
            type: string
          description: Sort orders by creation date ("created_at" for ascending or "-created_at" for descending).

      responses:
        '200':
          description: Successfully retrieved the list of unaccepted orders.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of orders available.
                  next:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the next page of results, if available.
                  previous:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the previous page of results, if available.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Unique ID of the order.
                        name:
                          type: string
                          description: Name of the order.
                        description:
                          type: string
                          description: Description of the order.
                        deadline:
                          type: string
                          format: date
                          description: Deadline for the order.
                        createdAt:
                          type: string
                          format: date
                          description: Date when the order was created.
                        status:
                          type: string
                          description: Current status of the order.
              example:
                count: 1
                next: "http://127.0.0.1:8000/api/orders/management/?page=2"
                previous: "http://127.0.0.1:8000/api/orders/management/?page=1"
                results:
                  - id: 1
                    name: First order name
                    description: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    deadline: "2025-12-31"
                    createdAt: "2025-01-09"
                    status: pending
                  - id: 2
                    name: Second order name
                    description: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    deadline: "2025-12-31"
                    createdAt: "2025-01-09"
                    status: pending
        '400':
          description: Validation error occurred during request.
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Invalid query parameter.
        '403':
          description: User is not authorized to view orders.
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.
        '500':
          description: Server error occurred while retrieving orders.
          content:
            application/json:
              schema:
                type: object
                example:
                  error: An error occurred while retrieving orders.

  /api/orders/management/{id}:
    patch:
      summary: Management of incoming orders, change the status of an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accepted:
                  type: boolean
                team:
                  type: integer
                status:
                  type: string
                  default: active
                  enum: [ active, closed ]
              required:
                - status
              example:
                accepted: true
                team: 1
                status: active

      responses:
        '200':
          description: Status of the updated order
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  owner:
                    type: integer
                    description: ID of the user who created the order (automatically assigned)
                  name:
                    type: string
                  description:
                    type: string
                  deadline:
                    type: string
                    format: date
                  accepted:
                    type: boolean
                    default: false
                  status:
                    type: string
                example:
                  id: 1
                  name: New Project
                  accepted: true
                  acceptedAt: 2024-11-30
                  team: 1
                  status: active
        '404':
          description: Team not found
          content:
            application/json:
              example:
                detail: "No Order matches the given query."

  /api/users/teams/:
    get:
      summary: Retrieve a list of teams
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [ available, unavailable ]
          description: Filter teams by their status
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Team ID
                    leader:
                      type: integer
                      description: User ID of the team leader
                    list_of_members:
                      type: array
                      items:
                        type: string
                      description: Number of members in the team
                    status:
                      type: string
                      description: Team status (available/unavailable)
              example:
                - id: 1
                  leader: 1
                  "list_of_members": [
                    "FirstMember",
                    "SecondMember"
                  ]
                  status: available
                - id: 2
                  leader: 2
                  "list_of_members": [
                    "NextFirstMember",
                    "NextSecondMember"
                  ]
                  status: unavailable
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Authentication credentials were not provided."

  /api/users/team/create:
    post:
      summary: Team creation by administrator
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                list_of_members:
                  type: array
                  items:
                    type: integer
                  description: List of user IDs to be added to the team
              required:
                - list_of_members
            example:
              list_of_members: [ 2, 3, 4 ]

      responses:
        '201':
          description: Team successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  team_id:
                    type: integer
                    description: ID of the created team
                  leader:
                    type: object
                    properties:
                      firstName:
                        type: string
                  list_of_members:
                    type: array
                    items:
                      type: object
                      properties:
                        firstName:
                          type: string
                  status:
                    type: string
                    description: Status of the team
              example:
                team_id: 12
                leader:
                  firstName: "John"
                list_of_members:
                  [ firstName: "Alice",
                    firstName: "Bob",
                    firstName: "Eve" ]
                status: available

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }

  /api/users/team/edit/{id}:
    patch:
      summary: Update a team by administrator
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the team to update
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                leader:
                  type: integer
                  description: (Optional) Updated user ID of the team leader
                list_of_members:
                  type: array
                  items:
                    type: integer
                  description: Updated list of user IDs in the team
                status:
                  type: string
                  description: (Optional) Updated status of the team
                  enum: [ available, unavailable ]
              required:
                - list_of_members
            example:
              leader_id: 1
              list_of_members: [ 2, 3 ]
              status: available

      responses:
        '200':
          description: Team successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  team_id:
                    type: integer
                    description: ID of the created team
                  leader:
                    type: object
                    properties:
                      id:
                        type: integer
                      firstName:
                        type: string
                      lastName:
                        type: string
                  list_of_members:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        firstName:
                          type: string
                        lastName:
                          type: string
                  status:
                    type: string
                    description: Status of the team
              example:
                team_id: 12
                leader:
                  firstName: "John"
                list_of_members:
                  [ firstName: "Alice",
                    firstName: "Bob" ]
                status: unavailable

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Authentication credentials were not provided."

        '403':
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "Authentication credentials were not provided."
        '404':
          description: Team not found
          content:
            application/json:
              example:
                detail: "Team with the given ID does not exist."

  /api/tasks/create/:
    post:
      summary: Creating tasks
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication. The user should be a team leader or administrator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: max length 255 chars
                description:
                  type: string
                  description: minimum is 10 chars, maximum is 2500 chars
                executor:
                  type: integer
                  description: Team member ID
                deadline:
                  type: string
                  format: date
              required:
                - title
                - description
                - executor
                - deadline
              example:
                title: First task
                description: Task description
                executor: 1
                deadline: 2024-12-09

      responses:
        "201":
          description: Task successfully created
          content:
            application/json:
              example:
                id: 1
                title: First task
                description: Task description
                executor: 1
                team: 1
                order: 1
                status: pending
                deadline: 2024-12-09
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }

        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.

  /api/tasks/:
    get:
      summary: Retrieve all tasks
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication. Accessible by administrators, team members, and the owner of the order.
        - in: query
          name: status
          schema:
            type: string
            default: active
          description: Filter tasks by status (e.g., "pending", "completed").
        - in: query
          name: executor
          schema:
            type: integer
          description: Filter tasks by team member ID to view their tasks.

      responses:
        "200":
          description: Successfully retrieved tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of projects.
                  next:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the next page of results.
                  previous:
                    type: string
                    format: uri
                    nullable: true
                    description: Link to the previous page of results.
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        executor:
                          type: integer
                        team:
                          type: integer
                        order:
                          type: integer
                        status:
                          type: string
                        deadline:
                          type: string
                          format: date
              example:
                {
                  "count": 3,
                  "next": "http://127.0.0.1:8000/api/tasks/?page=2",
                  "previous": "http://127.0.0.1:8000/api/tasks/?page=1",
                  "results": [
                    {
                      "id": 1,
                      "title": "First task",
                      "description": "Task description",
                      "executor": 1,
                      "team": 1,
                      "order": 1,
                      "status": "pending",
                      "deadline": "2025-12-09"
                    },
                    {
                      "id": 2,
                      "title": "Second task",
                      "description": "Task description",
                      "executor": 1,
                      "team": 1,
                      "order": 1,
                      "status": "pending",
                      "deadline": "2025-12-09"
                    }
                  ]
                }

        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.

  /api/tasks/edit/{id}/:
    patch:
      summary: Update task details
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication. Only administrators and team leaders can modify tasks.
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title for the task (max length 255 chars).
                description:
                  type: string
                  description: New description for the task (min 10 chars, max 2500 chars).
                executor:
                  type: integer
                  description: New executor ID (team member ID).
                deadline:
                  type: string
                  format: date
                  description: New deadline for the task.
                status:
                  enum: [ pending, active, closed ]
              example:
                title: Updated task title
                description: Updated task description
                executor: 2
                deadline: 2024-12-15
      responses:
        "200":
          description: Task successfully updated
          content:
            application/json:
              example:
                id: 1
                title: Updated task title
                description: Updated task description
                executor: 2
                team: 1
                order: 1
                status: pending
                deadline: 2024-12-15
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    "field_name": [
                      "This field is required."
                    ]
                  }
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.

  /api/tasks/delete/{id}/:
    delete:
      summary: Delete a specific task
      description: Deletes a task by its ID. Only team members or administrators can perform this action.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the task to delete.
      responses:
        "204":
          description: Task successfully deleted.
        '403':
          description: User not authorized
          content:
            application/json:
              schema:
                type: object
                example:
                  detail: Authentication credentials were not provided.
        "500":
          description: An error occurred while deleting the task.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An error occurred while deleting the task.
