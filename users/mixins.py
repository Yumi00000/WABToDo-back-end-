import logging


class UserLoggerMixin:
    """
    A mixin class for logging various user-related actions and events.

    This class provides logging functionality for user interactions, such as
    attempts to retrieve data, successful operations, validation errors, and
    general errors. The logs generated by this class can be used to monitor
    user activity, diagnose issues, and ensure accountability of processes.

    Attributes
    ----------
    _logger : logging.Logger
        The logger instance used for logging messages.
    _log_messages : dict[str, str]
        A dictionary containing predefined log messages categorized by their
        purpose (e.g., attempts, success, warnings, errors).

    Methods
    -------
    log_attempt_retrieve_dashboard() -> None
        Logs an informational message indicating that the user is attempting to
        retrieve dashboard information.
    log_successfully_retrieved_dashboard() -> None
        Logs an informational message indicating that dashboard information was
        successfully retrieved by the user.
    log_validation_error(error_detail: str) -> None
        Logs a warning message related to a validation error, including details
        about the error.
    log_error_retrieving(error: str) -> None
        Logs an error message describing an error encountered while retrieving
        dashboard information.
    """
    _logger = logging.getLogger(__name__)
    _log_messages = {
        # Attempts
        "attempt_retrieve_dashboard": "The user is attempting to retrieve information on the dashboard",
        # Success
        "success_retrieve_dashboard": "Dashboard information has been successfully retrieved by the user",
        # Warning
        "is_invalid": "Validation error %s",
        # Error
        "error_retrieve_dashboard": "Error while retrieving dashboard information, details: %s",
    }

    # Attempts
    def log_attempt_retrieve_dashboard(self) -> None:
        self._logger.info(self._log_messages["attempt_retrieve_dashboard"])

    # Success
    def log_successfully_retrieved_dashboard(self) -> None:
        self._logger.info(self._log_messages["success_retrieve_dashboard"])

    # Warning -> ValidationError
    def log_validation_error(self, error_detail: str) -> None:
        self._logger.warning(self._log_messages["is_invalid"], error_detail)

    # Errors
    def log_error_retrieving(self, error: str) -> None:
        self._logger.error(self._log_messages["error_retrieve_dashboard"], error)


class TeamLoggerMixin:
    """
    Provides logging functionality related to operations performed on teams, such as retrieving,
    creating, and updating team information. This class is intended to standardize and centralize
    the logging messages for specific actions, ensuring consistency and simplifying debugging.

    The class defines predefined log messages for attempts, successes, warnings, and errors, enabling
    developers to track the flow and outcomes of operations systematically. This mixin can be utilized
    by extending it in any class requiring the described logging mechanisms.

    Attributes:
        _logger (Logger): A logger instance for handling log messages.
        _log_messages (dict[str, str]): A dictionary containing predefined messages for various logging
            events, categorized into attempts, successes, warnings, and errors.

    Methods:
        log_attempt_retrieve_list_of_teams:
            Logs an attempt to retrieve a list of teams.

        log_attempt_retrieve_team_details:
            Logs an attempt to retrieve details of a specific team.

        log_attempt_create_team:
            Logs an attempt to create a new team.

        log_attempt_update_team:
            Logs an attempt to update an existing team.

        log_successfully_retrieved_list_of_teams:
            Logs a successful retrieval of a list of teams.

        log_successful_retrieve_team_details:
            Logs a successful retrieval of team details.

        log_successfully_created:
            Logs the successful creation of a new team.

        log_successfully_updated:
            Logs the successful update of an existing team.

        log_validation_error:
            Logs a validation error with details of what went wrong.

        log_error_retrieving:
            Logs an error while retrieving a list of teams.

        logg_error_retrieving_details:
            Logs an error while retrieving details of a team.

        log_error_creating:
            Logs an error while creating a new team.

        log_error_updating:
            Logs an error while updating an existing team.
    """
    _logger = logging.getLogger(__name__)
    _log_messages = {
        # Attempts
        "attempt_team_list": "The user is attempting to retrieve a list of available teams",
        "attempt_team_details": "The user is attempting to retrieve team details",
        "attempt_team_create": "The user is attempting to create a new team",
        "attempt_team_update": "The user is attempting to update an existing team",
        # Success
        "success_retrieve_team_list": "The list of teams was successfully retrieved",
        "success_retrieve_team_details": "Details about the team have been successfully retrieved",
        "success_created_team": "The new team has been successfully created",
        "success_updated_team": "The team has been successfully updated",
        # Warning
        "is_invalid": "Validation error %s",
        # Error
        "error_retrieve": "Error while retrieving list of teams, details: %s",
        "error_retrieve_team_details": "Error while retrieving team details, error details: %s",
        "error_creation_team": "Error while creating the team, details: %s",
        "error_updating_team": "Error while updating the team, details: %s",
    }

    # Attempts
    def log_attempt_retrieve_list_of_teams(self) -> None:
        self._logger.info(self._log_messages["attempt_team_list"])

    def log_attempt_retrieve_team_details(self) -> None:
        self._logger.info(self._log_messages["attempt_team_details"])

    def log_attempt_create_team(self) -> None:
        self._logger.info(self._log_messages["attempt_team_create"])

    def log_attempt_update_team(self) -> None:
        self._logger.info(self._log_messages["attempt_team_update"])

    # Success
    def log_successfully_retrieved_list_of_teams(self) -> None:
        self._logger.info(self._log_messages["success_retrieve_team_list"])

    def log_successful_retrieve_team_details(self) -> None:
        self._logger.info(self._log_messages["success_retrieve_team_details"])

    def log_successfully_created(self) -> None:
        self._logger.info(self._log_messages["success_created_team"])

    def log_successfully_updated(self) -> None:
        self._logger.info(self._log_messages["success_updated_team"])

    # Warning -> ValidationError
    def log_validation_error(self, error_detail: str) -> None:
        self._logger.warning(self._log_messages["is_invalid"], error_detail)

    # Errors
    def log_error_retrieving(self, error: str) -> None:
        self._logger.error(self._log_messages["error_retrieve"], error, exc_info=True)

    def logg_error_retrieving_details(self, error: str) -> None:
        self._logger.error(self._log_messages["error_retrieve_team_details"], error, exc_info=True)

    def log_error_creating(self, error: str) -> None:
        self._logger.error(self._log_messages["error_creation_team"], error, exc_info=True)

    def log_error_updating(self, error: str) -> None:
        self._logger.error(self._log_messages["error_updating_team"], error, exc_info=False)
